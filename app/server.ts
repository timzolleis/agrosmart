// generated by react-router-hono-server/dev
import { createGetLoadContext, createHonoServer } from 'react-router-hono-server/node';

import type { AuthenticatedUser } from '~/modules/authentication/model/authenticated-user.server';
import { PUBLIC_ROUTES, authenticationMiddleware } from '~/lib/middleware/authentication';

import { timing } from 'hono/timing';
import {
  requireAccountVerificationMiddleware,
  VERIFICATION_ROUTES,
} from '~/lib/middleware/require-account-verification';

declare module 'react-router' {
  interface AppLoadContext {
    user: AuthenticatedUser | undefined;
    requireUser: () => AuthenticatedUser;
  }
}

const getLoadContext = createGetLoadContext((c) => {
  return {
    //@ts-ignore
    user: c.get('user') as AuthenticatedUser | undefined,
    requireUser: () => {
      //@ts-ignore
      const user = c.get('user') as AuthenticatedUser | undefined;
      if (!user) {
        throw new Error('User is not authenticated');
      }
      return user;
    },
  };
});

export default await createHonoServer({
  getLoadContext,
  configure: (server) => {
    server.use(timing());
    server.use('*', authenticationMiddleware({ ignoreOnRoutes: PUBLIC_ROUTES }));
    server.use("*", requireAccountVerificationMiddleware({ignoreOnRoutes: [...PUBLIC_ROUTES, ...VERIFICATION_ROUTES]}))
  },
});
